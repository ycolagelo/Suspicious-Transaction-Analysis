-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


DROP TABLE IF EXISTS public.credit_card cascade;

CREATE TABLE IF NOT EXISTS public.credit_card
(
    card character varying(20) NOT NULL,
    holder_id INT,
	PRIMARY KEY (card)
);

DROP TABLE IF EXISTS public.card_holder;

CREATE TABLE IF NOT EXISTS public.card_holder
(
    card_holder_id integer NOT NULL,
    name character varying(255),
    PRIMARY KEY (card_holder_id)
);

DROP TABLE IF EXISTS public.merchant;

CREATE TABLE IF NOT EXISTS public.merchant
(
    mercahant_id integer NOT NULL,
    name character varying(255) NOT NULL,
    "id_merchant_category(fk)" integer NOT NULL,
    PRIMARY KEY (mercahant_id)
);

DROP TABLE IF EXISTS public."transaction" cascade;

CREATE TABLE IF NOT EXISTS public."transaction"
(
    trans_id integer NOT NULL,
    date timestamp without time zone NOT NULL,
    amount float NOT NULL,
    card character varying(20) NOT NULL,
    "id_merchant(fk)" integer NOT NULL,
    PRIMARY KEY (trans_id)
);


DROP TABLE IF EXISTS public.merchant_category cascade;

CREATE TABLE IF NOT EXISTS public.merchant_category
(
    merchant_category_id integer NOT NULL,
    name character varying(255),
    PRIMARY KEY (merchant_category_id)
);

ALTER TABLE IF EXISTS public.credit_card
    ADD FOREIGN KEY (holder_id)
    REFERENCES public.card_holder (card_holder_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.merchant
    ADD FOREIGN KEY ("id_merchant_category(fk)")
    REFERENCES public.mercahnt_category (merchant_category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."transaction "
    ADD FOREIGN KEY ("id_merchant(fk)")
    REFERENCES public.merchant (mercahant_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;




END;

select * from "transaction";

SELECT *  FROM  transaction
LEFT JOIN credit_card ON transaction.card = credit_card.card
LEFT JOIN card_holder ON credit_card.holder_id = card_holder.card_holder_id
WHERE card_holder.card_holder_id IN (2, 18)

SELECT * FROM credit_card 
LEFT JOIN transaction ON 
credit_card.card = transaction.card WHERE
credit_card.holder_id = 25 AND transaction.date BETWEEN '2018-01-01' and '2018-06-30'